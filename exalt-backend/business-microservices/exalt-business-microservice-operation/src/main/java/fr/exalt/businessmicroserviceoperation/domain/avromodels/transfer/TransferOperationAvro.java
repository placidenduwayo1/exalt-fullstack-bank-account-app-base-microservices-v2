/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransferOperationAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3196373913431226656L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferOperationAvro\",\"namespace\":\"fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer\",\"fields\":[{\"name\":\"originAccount\",\"type\":{\"type\":\"record\",\"name\":\"OriginAccountAvro\",\"fields\":[{\"name\":\"accountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"balance\",\"type\":\"double\"},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"originCustomer\",\"type\":{\"type\":\"record\",\"name\":\"OriginCustomerAvro\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}},{\"name\":\"destinationAccount\",\"type\":{\"type\":\"record\",\"name\":\"DestinationAccountAvro\",\"fields\":[{\"name\":\"accountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"balance\",\"type\":\"double\"},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"destinationCustomer\",\"type\":{\"type\":\"record\",\"name\":\"DestinationCustomerAvro\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}},{\"name\":\"mount\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransferOperationAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransferOperationAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransferOperationAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransferOperationAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransferOperationAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransferOperationAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransferOperationAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransferOperationAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransferOperationAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro originAccount;
  private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro destinationAccount;
  private double mount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransferOperationAvro() {}

  /**
   * All-args constructor.
   * @param originAccount The new value for originAccount
   * @param destinationAccount The new value for destinationAccount
   * @param mount The new value for mount
   */
  public TransferOperationAvro(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro originAccount, fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro destinationAccount, java.lang.Double mount) {
    this.originAccount = originAccount;
    this.destinationAccount = destinationAccount;
    this.mount = mount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return originAccount;
    case 1: return destinationAccount;
    case 2: return mount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: originAccount = (fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro)value$; break;
    case 1: destinationAccount = (fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro)value$; break;
    case 2: mount = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'originAccount' field.
   * @return The value of the 'originAccount' field.
   */
  public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro getOriginAccount() {
    return originAccount;
  }


  /**
   * Sets the value of the 'originAccount' field.
   * @param value the value to set.
   */
  public void setOriginAccount(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro value) {
    this.originAccount = value;
  }

  /**
   * Gets the value of the 'destinationAccount' field.
   * @return The value of the 'destinationAccount' field.
   */
  public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro getDestinationAccount() {
    return destinationAccount;
  }


  /**
   * Sets the value of the 'destinationAccount' field.
   * @param value the value to set.
   */
  public void setDestinationAccount(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro value) {
    this.destinationAccount = value;
  }

  /**
   * Gets the value of the 'mount' field.
   * @return The value of the 'mount' field.
   */
  public double getMount() {
    return mount;
  }


  /**
   * Sets the value of the 'mount' field.
   * @param value the value to set.
   */
  public void setMount(double value) {
    this.mount = value;
  }

  /**
   * Creates a new TransferOperationAvro RecordBuilder.
   * @return A new TransferOperationAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder newBuilder() {
    return new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder();
  }

  /**
   * Creates a new TransferOperationAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransferOperationAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder newBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder other) {
    if (other == null) {
      return new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder();
    } else {
      return new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder(other);
    }
  }

  /**
   * Creates a new TransferOperationAvro RecordBuilder by copying an existing TransferOperationAvro instance.
   * @param other The existing instance to copy.
   * @return A new TransferOperationAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder newBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro other) {
    if (other == null) {
      return new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder();
    } else {
      return new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransferOperationAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferOperationAvro>
    implements org.apache.avro.data.RecordBuilder<TransferOperationAvro> {

    private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro originAccount;
    private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.Builder originAccountBuilder;
    private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro destinationAccount;
    private fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.Builder destinationAccountBuilder;
    private double mount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.originAccount)) {
        this.originAccount = data().deepCopy(fields()[0].schema(), other.originAccount);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasOriginAccountBuilder()) {
        this.originAccountBuilder = fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.newBuilder(other.getOriginAccountBuilder());
      }
      if (isValidValue(fields()[1], other.destinationAccount)) {
        this.destinationAccount = data().deepCopy(fields()[1].schema(), other.destinationAccount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasDestinationAccountBuilder()) {
        this.destinationAccountBuilder = fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.newBuilder(other.getDestinationAccountBuilder());
      }
      if (isValidValue(fields()[2], other.mount)) {
        this.mount = data().deepCopy(fields()[2].schema(), other.mount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing TransferOperationAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.originAccount)) {
        this.originAccount = data().deepCopy(fields()[0].schema(), other.originAccount);
        fieldSetFlags()[0] = true;
      }
      this.originAccountBuilder = null;
      if (isValidValue(fields()[1], other.destinationAccount)) {
        this.destinationAccount = data().deepCopy(fields()[1].schema(), other.destinationAccount);
        fieldSetFlags()[1] = true;
      }
      this.destinationAccountBuilder = null;
      if (isValidValue(fields()[2], other.mount)) {
        this.mount = data().deepCopy(fields()[2].schema(), other.mount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'originAccount' field.
      * @return The value.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro getOriginAccount() {
      return originAccount;
    }


    /**
      * Sets the value of the 'originAccount' field.
      * @param value The value of 'originAccount'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder setOriginAccount(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro value) {
      validate(fields()[0], value);
      this.originAccountBuilder = null;
      this.originAccount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'originAccount' field has been set.
      * @return True if the 'originAccount' field has been set, false otherwise.
      */
    public boolean hasOriginAccount() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'originAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.Builder getOriginAccountBuilder() {
      if (originAccountBuilder == null) {
        if (hasOriginAccount()) {
          setOriginAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.newBuilder(originAccount));
        } else {
          setOriginAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.newBuilder());
        }
      }
      return originAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'originAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder setOriginAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro.Builder value) {
      clearOriginAccount();
      originAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'originAccount' field has an active Builder instance
     * @return True if the 'originAccount' field has an active Builder instance
     */
    public boolean hasOriginAccountBuilder() {
      return originAccountBuilder != null;
    }

    /**
      * Clears the value of the 'originAccount' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder clearOriginAccount() {
      originAccount = null;
      originAccountBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationAccount' field.
      * @return The value.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro getDestinationAccount() {
      return destinationAccount;
    }


    /**
      * Sets the value of the 'destinationAccount' field.
      * @param value The value of 'destinationAccount'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder setDestinationAccount(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro value) {
      validate(fields()[1], value);
      this.destinationAccountBuilder = null;
      this.destinationAccount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationAccount' field has been set.
      * @return True if the 'destinationAccount' field has been set, false otherwise.
      */
    public boolean hasDestinationAccount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'destinationAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.Builder getDestinationAccountBuilder() {
      if (destinationAccountBuilder == null) {
        if (hasDestinationAccount()) {
          setDestinationAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.newBuilder(destinationAccount));
        } else {
          setDestinationAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.newBuilder());
        }
      }
      return destinationAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'destinationAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder setDestinationAccountBuilder(fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro.Builder value) {
      clearDestinationAccount();
      destinationAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'destinationAccount' field has an active Builder instance
     * @return True if the 'destinationAccount' field has an active Builder instance
     */
    public boolean hasDestinationAccountBuilder() {
      return destinationAccountBuilder != null;
    }

    /**
      * Clears the value of the 'destinationAccount' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder clearDestinationAccount() {
      destinationAccount = null;
      destinationAccountBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mount' field.
      * @return The value.
      */
    public double getMount() {
      return mount;
    }


    /**
      * Sets the value of the 'mount' field.
      * @param value The value of 'mount'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder setMount(double value) {
      validate(fields()[2], value);
      this.mount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mount' field has been set.
      * @return True if the 'mount' field has been set, false otherwise.
      */
    public boolean hasMount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mount' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.TransferOperationAvro.Builder clearMount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransferOperationAvro build() {
      try {
        TransferOperationAvro record = new TransferOperationAvro();
        if (originAccountBuilder != null) {
          try {
            record.originAccount = this.originAccountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("originAccount"));
            throw e;
          }
        } else {
          record.originAccount = fieldSetFlags()[0] ? this.originAccount : (fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro) defaultValue(fields()[0]);
        }
        if (destinationAccountBuilder != null) {
          try {
            record.destinationAccount = this.destinationAccountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("destinationAccount"));
            throw e;
          }
        } else {
          record.destinationAccount = fieldSetFlags()[1] ? this.destinationAccount : (fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro) defaultValue(fields()[1]);
        }
        record.mount = fieldSetFlags()[2] ? this.mount : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransferOperationAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransferOperationAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransferOperationAvro>
    READER$ = (org.apache.avro.io.DatumReader<TransferOperationAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.originAccount.customEncode(out);

    this.destinationAccount.customEncode(out);

    out.writeDouble(this.mount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.originAccount == null) {
        this.originAccount = new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro();
      }
      this.originAccount.customDecode(in);

      if (this.destinationAccount == null) {
        this.destinationAccount = new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro();
      }
      this.destinationAccount.customDecode(in);

      this.mount = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.originAccount == null) {
            this.originAccount = new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.OriginAccountAvro();
          }
          this.originAccount.customDecode(in);
          break;

        case 1:
          if (this.destinationAccount == null) {
            this.destinationAccount = new fr.exalt.businessmicroserviceoperation.domain.avromodels.transfer.DestinationAccountAvro();
          }
          this.destinationAccount.customDecode(in);
          break;

        case 2:
          this.mount = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










