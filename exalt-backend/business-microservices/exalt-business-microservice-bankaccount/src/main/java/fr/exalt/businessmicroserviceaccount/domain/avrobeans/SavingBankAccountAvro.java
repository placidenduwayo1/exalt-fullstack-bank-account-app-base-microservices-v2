/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.exalt.businessmicroserviceaccount.domain.avrobeans;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SavingBankAccountAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 244753779286715428L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SavingBankAccountAvro\",\"namespace\":\"fr.exalt.businessmicroserviceaccount.domain.avrobeans\",\"fields\":[{\"name\":\"accountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"balance\",\"type\":\"double\"},{\"name\":\"interestRate\",\"type\":\"double\"},{\"name\":\"createdAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"CustomerAvro\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SavingBankAccountAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SavingBankAccountAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SavingBankAccountAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SavingBankAccountAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SavingBankAccountAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SavingBankAccountAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SavingBankAccountAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SavingBankAccountAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SavingBankAccountAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String accountId;
  private java.lang.String type;
  private java.lang.String state;
  private double balance;
  private double interestRate;
  private java.lang.String createdAt;
  private java.lang.String customerId;
  private fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro customer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SavingBankAccountAvro() {}

  /**
   * All-args constructor.
   * @param accountId The new value for accountId
   * @param type The new value for type
   * @param state The new value for state
   * @param balance The new value for balance
   * @param interestRate The new value for interestRate
   * @param createdAt The new value for createdAt
   * @param customerId The new value for customerId
   * @param customer The new value for customer
   */
  public SavingBankAccountAvro(java.lang.String accountId, java.lang.String type, java.lang.String state, java.lang.Double balance, java.lang.Double interestRate, java.lang.String createdAt, java.lang.String customerId, fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro customer) {
    this.accountId = accountId;
    this.type = type;
    this.state = state;
    this.balance = balance;
    this.interestRate = interestRate;
    this.createdAt = createdAt;
    this.customerId = customerId;
    this.customer = customer;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountId;
    case 1: return type;
    case 2: return state;
    case 3: return balance;
    case 4: return interestRate;
    case 5: return createdAt;
    case 6: return customerId;
    case 7: return customer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountId = value$ != null ? value$.toString() : null; break;
    case 1: type = value$ != null ? value$.toString() : null; break;
    case 2: state = value$ != null ? value$.toString() : null; break;
    case 3: balance = (java.lang.Double)value$; break;
    case 4: interestRate = (java.lang.Double)value$; break;
    case 5: createdAt = value$ != null ? value$.toString() : null; break;
    case 6: customerId = value$ != null ? value$.toString() : null; break;
    case 7: customer = (fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public java.lang.String getAccountId() {
    return accountId;
  }


  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.String value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public double getBalance() {
    return balance;
  }


  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(double value) {
    this.balance = value;
  }

  /**
   * Gets the value of the 'interestRate' field.
   * @return The value of the 'interestRate' field.
   */
  public double getInterestRate() {
    return interestRate;
  }


  /**
   * Sets the value of the 'interestRate' field.
   * @param value the value to set.
   */
  public void setInterestRate(double value) {
    this.interestRate = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.String getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.String value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro getCustomer() {
    return customer;
  }


  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro value) {
    this.customer = value;
  }

  /**
   * Creates a new SavingBankAccountAvro RecordBuilder.
   * @return A new SavingBankAccountAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder newBuilder() {
    return new fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder();
  }

  /**
   * Creates a new SavingBankAccountAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SavingBankAccountAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder newBuilder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder other) {
    if (other == null) {
      return new fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder();
    } else {
      return new fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder(other);
    }
  }

  /**
   * Creates a new SavingBankAccountAvro RecordBuilder by copying an existing SavingBankAccountAvro instance.
   * @param other The existing instance to copy.
   * @return A new SavingBankAccountAvro RecordBuilder
   */
  public static fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder newBuilder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro other) {
    if (other == null) {
      return new fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder();
    } else {
      return new fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for SavingBankAccountAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SavingBankAccountAvro>
    implements org.apache.avro.data.RecordBuilder<SavingBankAccountAvro> {

    private java.lang.String accountId;
    private java.lang.String type;
    private java.lang.String state;
    private double balance;
    private double interestRate;
    private java.lang.String createdAt;
    private java.lang.String customerId;
    private fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro customer;
    private fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.Builder customerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.balance)) {
        this.balance = data().deepCopy(fields()[3].schema(), other.balance);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.interestRate)) {
        this.interestRate = data().deepCopy(fields()[4].schema(), other.interestRate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.customerId)) {
        this.customerId = data().deepCopy(fields()[6].schema(), other.customerId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.customer)) {
        this.customer = data().deepCopy(fields()[7].schema(), other.customer);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.newBuilder(other.getCustomerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing SavingBankAccountAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.balance)) {
        this.balance = data().deepCopy(fields()[3].schema(), other.balance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.interestRate)) {
        this.interestRate = data().deepCopy(fields()[4].schema(), other.interestRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.customerId)) {
        this.customerId = data().deepCopy(fields()[6].schema(), other.customerId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.customer)) {
        this.customer = data().deepCopy(fields()[7].schema(), other.customer);
        fieldSetFlags()[7] = true;
      }
      this.customerBuilder = null;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public java.lang.String getAccountId() {
      return accountId;
    }


    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setAccountId(java.lang.String value) {
      validate(fields()[0], value);
      this.accountId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setType(java.lang.String value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setState(java.lang.String value) {
      validate(fields()[2], value);
      this.state = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearState() {
      state = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public double getBalance() {
      return balance;
    }


    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setBalance(double value) {
      validate(fields()[3], value);
      this.balance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearBalance() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestRate' field.
      * @return The value.
      */
    public double getInterestRate() {
      return interestRate;
    }


    /**
      * Sets the value of the 'interestRate' field.
      * @param value The value of 'interestRate'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setInterestRate(double value) {
      validate(fields()[4], value);
      this.interestRate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'interestRate' field has been set.
      * @return True if the 'interestRate' field has been set, false otherwise.
      */
    public boolean hasInterestRate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'interestRate' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearInterestRate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.String getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setCreatedAt(java.lang.String value) {
      validate(fields()[5], value);
      this.createdAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setCustomerId(java.lang.String value) {
      validate(fields()[6], value);
      this.customerId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro getCustomer() {
      return customer;
    }


    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setCustomer(fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro value) {
      validate(fields()[7], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.newBuilder(customer));
        } else {
          setCustomerBuilder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder setCustomerBuilder(fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public fr.exalt.businessmicroserviceaccount.domain.avrobeans.SavingBankAccountAvro.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SavingBankAccountAvro build() {
      try {
        SavingBankAccountAvro record = new SavingBankAccountAvro();
        record.accountId = fieldSetFlags()[0] ? this.accountId : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.String) defaultValue(fields()[1]);
        record.state = fieldSetFlags()[2] ? this.state : (java.lang.String) defaultValue(fields()[2]);
        record.balance = fieldSetFlags()[3] ? this.balance : (java.lang.Double) defaultValue(fields()[3]);
        record.interestRate = fieldSetFlags()[4] ? this.interestRate : (java.lang.Double) defaultValue(fields()[4]);
        record.createdAt = fieldSetFlags()[5] ? this.createdAt : (java.lang.String) defaultValue(fields()[5]);
        record.customerId = fieldSetFlags()[6] ? this.customerId : (java.lang.String) defaultValue(fields()[6]);
        if (customerBuilder != null) {
          try {
            record.customer = this.customerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("customer"));
            throw e;
          }
        } else {
          record.customer = fieldSetFlags()[7] ? this.customer : (fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro) defaultValue(fields()[7]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SavingBankAccountAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SavingBankAccountAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SavingBankAccountAvro>
    READER$ = (org.apache.avro.io.DatumReader<SavingBankAccountAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.accountId);

    out.writeString(this.type);

    out.writeString(this.state);

    out.writeDouble(this.balance);

    out.writeDouble(this.interestRate);

    out.writeString(this.createdAt);

    out.writeString(this.customerId);

    this.customer.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.accountId = in.readString();

      this.type = in.readString();

      this.state = in.readString();

      this.balance = in.readDouble();

      this.interestRate = in.readDouble();

      this.createdAt = in.readString();

      this.customerId = in.readString();

      if (this.customer == null) {
        this.customer = new fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro();
      }
      this.customer.customDecode(in);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.accountId = in.readString();
          break;

        case 1:
          this.type = in.readString();
          break;

        case 2:
          this.state = in.readString();
          break;

        case 3:
          this.balance = in.readDouble();
          break;

        case 4:
          this.interestRate = in.readDouble();
          break;

        case 5:
          this.createdAt = in.readString();
          break;

        case 6:
          this.customerId = in.readString();
          break;

        case 7:
          if (this.customer == null) {
            this.customer = new fr.exalt.businessmicroserviceaccount.domain.avrobeans.CustomerAvro();
          }
          this.customer.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










